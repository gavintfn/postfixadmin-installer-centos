#! /usr/bin/perl

# Postfixadmin-installer

# Installs and nearly configures a Postfix/Dovecot/MySQL/Postfixadmin mailer on a Debianish system.

# You should be able to just drop it in and run it. If it's missing anything (it only needs
# LWP::Simple and for Postfix and MySQL to be configured enough to be running) it tells you how to
# get it.
# Tries to get the MySQL debian-sys-maint credentials and use them. Currently, I'm not quite
# sure what it does if it doesn't get them :)
#
# Written by Avi (@avi.co) in 2011

#Depends: mysql-server|mariadb-server), epel-release
$|=1;

use strict;
use File::Copy;
use Cwd;
use Digest::SHA qw/sha1_hex/;
use Term::ANSIColor;
use Getopt::Long qw/:config auto_version/;
use Cwd;

# Check OS release
my $pfa_os_release = 'other_noissue';
if ( -f "/etc/issue" ) {
	if (`grep "Linux 8" /etc/issue`) { $pfa_os_release = 'jessie'; }
	elsif (`grep "Linux 7" /etc/issue`) { $pfa_os_release = 'wheezy'; }
	else { $pfa_os_release = 'other'; }
}

my $postfixadminDir = "/var/www/html/postfixadmin";


# Config starts here
our $VERSION = "0.20170721 (Centos 6; Dovecot 2.x)";

my $f_log = '/tmp/postfixadmin-installer.log';
my $writeLog = 1;
my $mysqlhost = undef;
my $mysqluser = undef;
my $mysqlpass = undef;
my $fqdn;
my $help;
my $overwrite = 0;
my $colour=1;
my $version=0;

# This is the user that postfix and dovecot (and whatever else) will use to interface with the db.
my $dbuser = "vmail";
my $dbhost = "localhost";
my $dbname = "vmail";
my $dbpass = createPassword(25);
chomp $dbpass;

GetOptions(
  'colour!'          => \$colour,
  'overwrite'        => \$overwrite,
	'log!'	           => \$writeLog,
	'logfile=s'        => \$f_log,
	'mysqluser=s'      => \$mysqluser,
	'mysqlpass=s'      => \$mysqlpass,
	'mysqlhost=s'      => \$mysqlhost,
	'fqdn=s'           => \$fqdn,
	'help|h'           => \$help,
	'pfa-mysqluser=s'  => \$dbuser,
	'pfa-mysqlpass=s'  => \$dbpass,
	'pfa-mysqlhost=s'  => \$dbhost,
	'pfa-mysqldb=s'    => \$dbname,
	'version'          => \$version,
);

if(1 == $version){
	print "postfixadmin-installer version $VERSION\n";
	exit;
}

if ( $< != 0 ) {
print "This script must be run as root\n";
exit (0);
}

unless($fqdn =~ /.+/){
	$fqdn = `hostname -f`;
	chomp $fqdn;
}
if ( length($fqdn) < 3 ) {
print "The hostname $fqdn is too short or missing\n";
exit (1);
}


if($help){
  print <<EOF;

postfixadmin-installer

  Installs postfixadmin

usage:
  postfixadmin-installer [option]

  --nocolour             Don't print coloured text
  --fqdn <fqdn>          set FQDN (used in links in postfixadmin UI).
  --help                 show this help.
  --nolog                don't log
  --logfile <path>       write logfile at path
  --overwrite            Overwrite detected existing installs

 Mysql admin details: these are the details the script will use to log in

  --mysqlhost   host
  --mysqluser   username
  --mysqlpass   password

  If none are set, will use the contents of /etc/mysql/debian.cnf to auth with the
  db. If you set a password here you must also set a user.

 Set postfixadmin's MySQL details; these are the details PFA will use in it's day-to-day operations:
  --pfa-mysqlhost   host default:
  --pfa-mysqluser   username
  --pfa-mysqlpass   password
  --pfa-mysqldb     database

EOF
exit;
}



if($writeLog > 0){
	eval{ open(my $f, ">", $f_log) or die "Error opening logfile '$f_log' : $!" };
	if($@){
		_warn($@);
	$writeLog = 0;
	}
}

my @errors;
my $task;

select(STDOUT);
$|++;

my ($y,$m,$d)=(localtime(time))[5,4,3];
my $date = $y + 1900 ."-".sprintf("%02d",$m + 1)."-$d";


print "Postfixadmin-installer\n\n";
print "Installing;";
if($writeLog){
	print " writing a log to $f_log";
}else{
	print " not writing a log file";
}
if($overwrite){
	printRed(", overwriting existing installations");
	print "\n";
}else{
	print ", aborting if another installtion is detected\n";
}
print "\nFQDN guessed as ";
printYellow($fqdn);
print "\n\n";
print "Run with --help to see options; carrying on in two seconds...";
sleep(1);
print ".";
sleep(1);
print "Carrying on! \n";
# There's a bunch of faffing with files. Every file we edit is backed up first, unless it's
# (almost) guaranteed to be either not there already or not wanted (like postfix's mysql config).

my $dovecotDotConfFile = "/etc/dovecot/dovecot.conf";
my $dovecotDotConfBackupFile = "/etc/dovecot/.bak_${date}_dovecot.conf";

my $dovecotSqlFile = "/etc/dovecot/dovecot-sql.conf";
my $dovecotSqlBackupFile = "/etc/dovecot/.bak_${date}_dovecot-sql.conf";

# We make the MySQL files in here. All other postfix files have their full paths set.
my $postfixDir = "/etc/postfix";

my $postfixMainDotCfFile = "/etc/postfix/main.cf";
my $postfixMainDotCfBackupFile = "/etc/postfix/.bak_${date}_main.cf";

my $postfixMasterDotCfFile = "/etc/postfix/master.cf";
my $postfixMasterDotCfBackupFile = "/etc/postfix/.bak_${date}_master.cf";

my $saslauthdFile = "/etc/sysconfig/saslauthd";
my $saslauthdBackupFile = "/etc/sysconfig/.bak_${date}_saslauthd";

# This is the dir under which the mailboxes are created, as "/var/lib/vmail/domain/<email-address>/Maildir
my $mailboxDir = "/var/lib/vmail";


#A glob matching the munin plugins we wish to enable:
my $muninPluginGlob = "/usr/share/munin/plugins/postfix*";
# The dir for the active munin plugins:
my $muninActivePluginDir = "/etc/munin/plugins";


# I assume a group named the same as this. Dovecot and Postfix both do their virtual mailbox related
# jobs as this user, so the contents of $mailboxDir must be owned by it
my $unixUser = "vmail";
my $uidnum = 999;
my $gidnum = 122;

# We also need a user and group for the vacation message management. Again, we simply create a group
# of the same name as the user.
my $vacationUser = "vacation";
my $vacationSpool = "/var/spool/vacation";
my $vacationDomain = "autoreply.".$fqdn;
my $vacationMasterDotCf = "vacation  unix  -\tn\tn\t-\t-\tpipe\n";
$vacationMasterDotCf .= '  flags=Rq user=vacation argv=/var/spool/vacation/vacation.pl -f ${sender} ${recipient}';

my $installdir = cwd();
print "$installdir\n";


# Packages we depend upon. Remember that the script can't cope with installers that need interaction.
# Any that do need adding below
my $packages = "dovecot roundcubemail dovecot-pigeonhole dovecot-mysql cyrus-sasl-devel cyrus-sasl-sql subversion perl-MailTools perl-MIME-EncWords perl-MIME-Charset perl-Email-Valid perl-Test-Pod perl-TimeDate perl-Mail-Sender perl-Log-Log4perl amavisd-new clamav clamd perl-Convert-BinHex wget patch httpd mod_ssl php php-mysql php-pdo php-common php-cli php-gd php-ncurses php-snmp php-mbstring php-mysql php-devel php-imap php-odbc php-pear php-xml php-xmlrpc php-dba php-pear-DB php-process php-pear-DB php-mcrypt munin-node";

# postfix and mysql-server both require human-interaction to install, so we insist it's done before
# this script runs. There's probably a more elegant way of doing this. This also forces (or at least
# encourages) removal of the old mailer first.

my @missingPackages;
if(system("rpm -V epel-release") != 0) { push(@missingPackages, "epel-release"); }

if(system("rpm -V mysql-server") != 0) { push(@missingPackages, "mysql-server"); }

if(scalar(@missingPackages) > 0){
	print STDERR "Missing packages: ".join(" ", @missingPackages).". Please install these and retry\nYou could try \"yum -y install ".join(" ", @missingPackages)."\"\n";
	exit 1;
}

print "Starting mysqld...";
system("/etc/init.d/mysqld start 2>/dev/null >/dev/null");
if ($? != 0){
	printRed(" ERROR\n");
	exit 1;
}else{
	printGreen(" done\n");
}

my $ignoreBackupFailures = 0;


#### Postfixadmin-specific config  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

my $postfixadminURL = "https://netcologne.dl.sourceforge.net/project/postfixadmin/postfixadmin/postfixadmin-3.0.2/postfixadmin-3.0.2.tar.gz";

my ($postfixadminPasswordPlain, $postfixadminPasswordHash) = postfixadminCreatePassword();

sub printEndInstructions{
	print "All done, now you can go and visit\n    ";
	printBlue("http://$fqdn/postfixadmin/setup.php");
	print "\nand create a new admin user using this setup password:\n\t";
	printYellow($postfixadminPasswordPlain);
	print "\n\nHave Fun!\n\n";
}

#### Postfix-specific config # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# We need to create a series of files in /etc/postfix (or $postfixDir) for Postfix to use
# to get the MySQL credentials, and to find what queires to run to work out what to do with
# mail addressed to any given address. The credentials need to be the same in all, so this will be
# put at the top of each:
sub postfixCredentials() {
	return <<EOF;
user = $dbuser
password = $dbpass
hosts = $dbhost
dbname = $dbname
EOF
}

# For the vacation script to work, Postfix uses a transport maps file. This is it:
my $postfixTransportMapsFile = "/etc/postfix/transport";

# This is a hash of the files we create in /etc/postfix (or $postfixDir). The key is the
# filename and the value is the query line. The resulting files are a concatenation of the
# output of postfixCredentials() above and the relevant value from here.
my %postfixFiles = (
	'mysql_virtual_alias_domain_catchall_maps'	=>  'query = SELECT goto FROM alias,alias_domain WHERE alias_domain.alias_domain = \'%d\' and alias.address = CONCAT(\'@\', alias_domain.target_domain) AND alias.active = 1 AND alias_domain.active=\'1\'',
	'mysql_virtual_alias_domain_mailbox_maps'	=>  'query = SELECT maildir FROM mailbox,alias_domain WHERE alias_domain.alias_domain = \'%d\' and mailbox.username = CONCAT(\'%u\', \'@\', alias_domain.target_domain) AND mailbox.active = 1 AND alias_domain.active=\'1\'',
	'mysql_virtual_alias_domain_maps'		=>  'query = SELECT goto FROM alias,alias_domain WHERE alias_domain.alias_domain = \'%d\' and alias.address = CONCAT(\'%u\', \'@\', alias_domain.target_domain) AND alias.active = 1 AND alias_domain.active=\'1\'',
	'mysql_virtual_alias_maps'			=>  'query = SELECT goto FROM alias WHERE address=\'%s\' AND active = \'1\'',
	'mysql_virtual_domains_maps'			=>  'query = SELECT domain FROM domain WHERE domain=\'%s\' AND active = \'1\'',
	'mysql_virtual_mailbox_maps'			=>  'query = SELECT maildir FROM mailbox WHERE username=\'%s\' AND active = \'1\'',
);

# These are the config bits that need to be appended to postfix's main.cf. Handily, postfix
# is quite happy with repeated config directives, just sticking with the last value it
# reads so it doesn't matter if we repeat things.
sub mainDotCf(){
	my $uid = shift;
	my $gid = shift;
	return <<EOF;

# # # Begin insertion by postfixdovecotmysql script $date # # #
# Networking
mynetworks = 127.0.0.0/8
inet_interfaces = all

# TLS parameters
smtpd_tls_cert_file=/etc/pki/dovecot/certs/dovecot.pem
smtpd_tls_key_file=/etc/pki/dovecot/private/dovecot.pem
smtpd_use_tls=yes

virtual_mailbox_domains = proxy:mysql:$postfixDir/mysql_virtual_domains_maps.cf
virtual_alias_maps =
   proxy:mysql:$postfixDir/mysql_virtual_alias_maps.cf,
   proxy:mysql:$postfixDir/mysql_virtual_alias_domain_maps.cf,
   proxy:mysql:$postfixDir/mysql_virtual_alias_domain_catchall_maps.cf
virtual_mailbox_maps =
   proxy:mysql:$postfixDir/mysql_virtual_mailbox_maps.cf,
   proxy:mysql:$postfixDir/mysql_virtual_alias_domain_mailbox_maps.cf
virtual_mailbox_base = $mailboxDir
virtual_uid_maps = static:$uid
virtual_gid_maps = static:$gid

transport_maps = hash:$postfixTransportMapsFile

smtpd_sasl_type = dovecot
smtpd_sasl_path = private/auth
broken_sasl_auth_clients = yes
smtpd_sasl_auth_enable = yes
smtpd_sasl_local_domain =
smtpd_recipient_restrictions = permit_mynetworks,
				permit_sasl_authenticated,
				reject_rbl_client zen.spamhaus.org,
				reject_rbl_client bl.spamcop.net,
				reject_unauth_destination

# # # End insertion by postfixdovecotmysql script $date # # #

EOF
}

# This needs to appear in the list at the bottom of master.cf. Again, postfix is happy to
# have a few of these, but the first wins. This goes at the end to not tread on anybody
# else's toes (and because that's the easiest place to put it).
sub masterDotCf() {
	return <<EOF;
dovecot   unix  -       n       n       -       -       pipe
  flags=DRhu user=$unixUser:$unixUser argv=/usr/libexec/dovecot/deliver -d \${recipient}
EOF
}

#### Dovecot-specific config # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Dovecot can use a separate file for MySQL permissions, which is generally recommended. This
# is that file:
sub dovecotDotSql() {
	my $uid = shift;
	return <<EOF;
connect = host=$dbhost dbname=$dbname user=$dbuser password=$dbpass
driver = mysql
default_pass_scheme = MD5-CRYPT
password_query = SELECT username AS user,password FROM mailbox WHERE username = '%u' AND active='1'
user_query = SELECT concat('/var/lib/vmail/', maildir) as home, $uidnum AS uid, $gidnum AS gid FROM mailbox WHERE username = '%u' and active='1'

EOF
}

# Dovecot.conf ships with hundreds of comments which are probably useful, and it's not hard to
# script the right config changes into it, but it *is* hard for a human to use. So we do away
# with that and drop our own in. It's all backed up anyway.
sub dovecotDotConf(){
	my $uid = shift;
	return <<EOF;
protocols = imap pop3 sieve
log_timestamp = "%Y-%m-%d %H:%M:%S "
mail_location = maildir:~
mail_privileged_group = $unixUser
# This should match that of the owner of the $mailboxDir hierarchy, and
# be the same as the one postfix uses.
first_valid_uid = $uid
# Allow people to use plaintext auth even when TLS/SSL is available (you
# might not want this but it is handy when testing):
disable_plaintext_auth = no
# Uncomment this to get nice and verbose messages about authentication
# problems:
# auth_debug=yes

ssl = yes
ssl_cert=</etc/pki/dovecot/certs/dovecot.pem
ssl_key=</etc/pki/dovecot/private/dovecot.pem

protocol pop3 {
  pop3_uidl_format = %08Xu%08Xv
}

# 'plain' here doesn't override the disble_plaintext_auth_default of 'yes'.
# you should add any other auth mechanisms you want
auth_mechanisms = plain login
userdb {
  driver = sql
  args = /etc/dovecot/dovecot-sql.conf
}
passdb {
  driver = sql
  args = /etc/dovecot/dovecot-sql.conf
}

service auth {
  unix_listener /var/spool/postfix/private/auth {
    mode = 0660
    # yes, 'postfix' (or the user that owns the above socket file), not vmail
    user = postfix
    group = postfix
  }
}

service managesieve-login {
  inet_listener sieve {
    port = 4190
  }
  service_count = 1
  process_min_avail = 0
  vsz_limit = 64M
}
service managesieve {
}

protocol sieve {
  managesieve_max_line_length = 65536
  managesieve_implementation_string = Dovecot Pigeonhole
  managesieve_max_compile_errors = 5
}

lda_mailbox_autocreate = yes
lda_mailbox_autosubscribe = yes

protocol lda {
  mail_plugins = quota sieve
  postmaster_address = postmaster\@your-domain.tld
}

protocol imap {
  mail_plugins = quota imap_quota
  imap_client_workarounds = delay-newmail
}

lmtp_save_to_detail_mailbox = yes

protocol lmtp {
  mail_plugins = sieve
}
EOF
}



### SASL-specific config # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# SASL is necessary for having Postfix talk to Dovecot to validate credentials it's passed
# for SMTP auth. It's pretty simple to configure, just changing two lines in its defaults
# file
# This sub's unique in that it does the backing up itself, since it parses the backup
# into the new real file.
sub sasl(){
	my $in;
	my $out;
	eval {open($in, "<", $saslauthdBackupFile) or die()};
	if ($@){
		fail("Error opening $saslauthdBackupFile for reading");
		return;
	}
	eval{open($out, ">", $saslauthdFile)};
	if ($@){
		fail("Error opening $saslauthdFile for writing");
		return;
	}
	while(<$in>){
		my $line = $_;
		if(/^START=no/){
			$line = "START=yes\n";
		}
		if(/^OPTIONS/){
#			$line = "OPTIONS=\"-c -m /var/spool/postfix/var/run/saslauthd\""
			$line = "OPTIONS=\"-c -m /var/run/saslauthd\"";
		}
		print $out $line;
	}
	close($out);
	close($in);
	return 1;
}


### # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

### Here ends the config  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

### # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# This is code all the way down, now. You shouldn't need or want to change any of this (and, if
# you do, please tell me so I can fix/amend it here, too!)



# Herein, the first 'print' of any stanza should serve as a reasonable comment on what it's doing
print "Guessing MySQL credentials...";
if ( (!$mysqlhost || !$mysqluser )){
	print "Please supply a MySQL host and admin username on the command line with --mysqlhost and --mysqluser\n";
	exit 1;
}

if (!$mysqlpass){
	printRed("Failed\n");
	print "\tPlease enter the password for mysql user \'$mysqluser\':\n";
	system('stty','-echo');
	chop($mysqlpass=<STDIN>);
	system('stty','echo');
}else{
	printGreen("Done\n");
}
print "Checking MySQL credentials...";
if (system("mysql -u root -p$mysqlpass  -e \";\"") == 0){
		printGreen("Done\n");
	}else{
		fail("MySQL credentials did not work\n");
		exit 1;
	};

unless($overwrite > 0){
	print "Testing for existing install...\n";
	if( -d $postfixadminDir ){
		opendir(my $dh, $postfixadminDir);
		my $count = 0;
		while( my $file = readdir($dh)){
			next if $file =~ m#^\.\.?$#;
			$count++;
			if($count > 1){
				printRed("Found install in '$postfixadminDir'; aborting (run with --overwrite to skip this; --help for all options\n");
				exit;
			}
		}
	}
}

start("Patching yum Base repo file to prevent postfix from being replaced by an update\n");

my $orig = "/etc/yum.repos.d/CentOS-Base.repo";
my $backup = "/etc/yum.repos.d/CentOS-Base.repo.bakup";

my $patched;
open my $fha, '<', $orig or die $!;
while( my $line = <$fha> ) { # print the lines before the change
	if (($. == 17) || ($. == 25)) {# line number before change
		$line =~ s/gpgcheck=1/exclude=postfix\ngpgcheck=1/;
	}
	$patched .= $line;
}
close $fha;
rename($orig, $backup) or system("mv", $orig, $backup) or die $!;
open my $fhb, '>', $orig or die $!;
print $fhb $patched;
close $fhb;

start("Installing Postfix with MySQL support");
open(my $install, '-|', 'yum', '-y', '--enablerepo=centosplus', 'install', 'postfix') or die "ERROR RUNNING INSTALL";
while(<$install>) {
	print '#';
}
print "\n";
close($install);

start("Installing packages (this can take a few minutes)");
open(my $install, "yum -y install $packages |") or die "ERROR RUNNING INSTALL";
while(<$install>) {
	print '#';
}
print "\n";
close($install);



start("Creating user $unixUser in group $unixUser");
my($uid,$gid);
if ( getpwnam($unixUser) =~ /(\d+)/){
	$uid = $1;
	if(getgrnam($unixUser) =~ /(\d+)/){
		$gid = $1;
		_print ("skipping; $unixUser:$unixUser already exist\n");
	}else{
		foreach my $cmd ("groupadd $unixUser", "usermod -a -G $unixUser $unixUser"){
			run($cmd);
		}
	}
	succeed();
}else{
	my $cmd = "groupadd -r --gid $gidnum $unixUser && useradd -r -d $mailboxDir -s /sbin/nologin -g $unixUser -u $uidnum -c \"Virtual mailbox\" $unixUser";
	if(run($cmd) != 0){
		fail("useradd exited non-zero");
	}else{
		$uid = getpwnam($unixUser);
		$gid = getgrnam($unixUser);
		chomp $uid;
		succeed("UID: $uid");
	}
}

start("Creating user $vacationUser");
my $cmd = "useradd -r -U -d $vacationSpool -m -s /sbin/nologin $vacationUser";
if(run($cmd) != 0){
	fail("Useradd exited non-zero");
}else{
	succeed();
}

runTest("mkdir -m 770 -p $mailboxDir", "creating mailbox dir '$mailboxDir' with mode 770");
runTest("chmod a+w /var", "Setting /var world-writeable for Dovecot");
runTest("chown -R $unixUser:$unixUser $mailboxDir", "Setting owner of $mailboxDir to $unixUser:$unixUser");


# Creating postfix MySQL files:
while ( my($file, $query) = each %postfixFiles ){
	my $file = $postfixDir."/".$file.".cf";
	start("Creating $file...");
	my $f;
	eval{open($f, ">", $file)};
	if ($@){
		fail("couldn't open $file for writing: $!");
	}else{
		print $f &postfixCredentials();
		print $f $query;
		close($f);
		`chown postfix:postfix $file`;
		`chmod 600 $file`;
		succeed();
	}
}

#Creating postfix transport maps file
start("Creating tranport maps file $postfixTransportMapsFile");
my $f;
eval {open($f, ">", "/etc/postfix/transport") or die "Error opening transport file \"$postfixTransportMapsFile\" : $!";};
if ($@){
	print $@;
	push(@errors,$postfixTransportMapsFile);
}else{
	print $f "$vacationDomain $vacationUser\n";
	close($f);
	my $cmd = "postmap /etc/postfix/transport 2>/dev/null >/dev/null";
	if(run($cmd) != 0){
		fail();
	}else{
		succeed();
	}
}


# dovecot-sql.conf:
my $write = 1;
if ( -f $dovecotSqlFile ){
	start("Backing up $dovecotSqlFile to $dovecotSqlBackupFile");
	$write = &backup($dovecotSqlFile, $dovecotSqlBackupFile);
}
if($write == 1){
	succeed();
	start("Creating new $dovecotSqlFile");
	my $f;
	eval {open ($f, ">", $dovecotSqlFile) or die("Error opening dovecot SQL file $dovecotSqlFile : $!");};
	if ($@){
		fail($@);
	}else{
		print $f &dovecotDotSql($uid);
		close($f);
		run("chown root:root $dovecotSqlFile");
		run("chmod 600 $dovecotSqlFile");
		succeed();
	}
}else{
	print " skipping";
}



# dovecot.conf
start("Backing up $dovecotDotConfFile to $dovecotDotConfBackupFile");
my $write = &backup($dovecotDotConfFile, $dovecotDotConfBackupFile);
if ($write == 1){
	print "Replacing $dovecotDotConfFile ...";
	my $f;
	eval{open ($f, ">", "$dovecotDotConfFile") or die()};
	if($@){
		fail("couldn't open $dovecotDotConfFile for writing:$!");
	}else{
		print $f &dovecotDotConf($uid);
		close($f);
		succeed();
	}
}

# main.cf
start("Checking for config in main.cf");
my @lines;
my $lastrun;
my $skipMainDotCf = 0;
eval{
	open(my $f, "<", $postfixMainDotCfFile) or die();
	my @file = <$f>;
	@lines = grep(/insertion by postfixdovecotmysql script (\d\d\d\d-\d\d-\d\d) \#/ , @file);
	$lastrun = $1;
};
if($@){
	fail("error opening $postfixMainDotCfFile for writing. Several other things are likely to go wrong");
}
if ( $#lines > 0 ){
	succeed("Found insertion from $lastrun, skipping main.cf config");
	$skipMainDotCf = 1;
}else{
	succeed();
}

start("Backing up $postfixMainDotCfFile to $postfixMainDotCfBackupFile");
if ($skipMainDotCf == 1){
	print "skipping $postfixMainDotCfFile\n";
}else{
	my $write = &backup($postfixMainDotCfFile, $postfixMainDotCfBackupFile);
	if ($write == 1){
		succeed();
		start("Appending to $postfixMainDotCfFile");
		my $f;
		eval {open ($f, ">>", $postfixMainDotCfFile) or die()};
		if ($@){
			fail("error opening postfix's main.cf ($postfixMainDotCfFile) for writing\n");
		}else{
			print $f &mainDotCf($uid,$gid);
			close($f);
			succeed();
		}
	}
}


start("Backing up $postfixMasterDotCfFile to $postfixMasterDotCfBackupFile");
$write = &backup($postfixMasterDotCfFile, $postfixMasterDotCfBackupFile);
if ($write == 1){
	succeed();
	start("Appending to $postfixMasterDotCfFile");
	my $f;
	eval{open ($f, ">>", $postfixMasterDotCfFile) or die($!)};
	if($@){
		fail("Couldn't open $postfixMasterDotCfFile for appending : $@");
	}else{
		print $f &masterDotCf;
		print $f $vacationMasterDotCf;
		close($f);
		succeed();
	}
}else{
	printYellow("Skipping $postfixMasterDotCfFile\n");
}

start("Creating auth socket dir");
if (run("mkdir -p /var/spool/postfix/private/") == 0){
	succeed();
}else{
	fail()
}

start("Backing up $saslauthdFile to $saslauthdBackupFile");

$write = &backup($saslauthdFile, $saslauthdBackupFile);
if ($write == 1){
	succeed();
	start("Configuring saslauthd");
	succeed() if (&sasl());
}



# MySQL setup:

start("Creating db");
my $mysqlconnect = "mysql -u $mysqluser -h $mysqlhost -p$mysqlpass";

if (system("echo \"use $dbname\" | $mysqlconnect 2>/dev/null") == 0){
	print "skip; db already exists\n";
}else{
	if(system("echo \"create database $dbname\" | $mysqlconnect") == 0){
		succeed();
	}else{
		fail("'create database $dbname' returned non-zero");
	}
}

start("Configuring db");
if (system("echo \"grant all privileges on $dbname.* to $dbuser\@localhost identified by \'$dbpass\'\" | $mysqlconnect") == 0){
	succeed();
}else{
	fail("'grant all privileges on $dbname.* to $dbuser\@localhost identified by \'$dbpass\'\\' returned non-zero\n");
}


start("Getting postfixadmin");
;
if(run ("wget -q -O /var/www/postfixadmin.tar.gz $postfixadminURL") == 0) {
	succeed();
}else{
	fail("wget of <$postfixadminURL> failed with an error");
}


start("Extracting postfixadmin");
if ( -d $postfixadminDir){
	opendir (my $d, $postfixadminDir);
 	my @files = grep { !/^\./ && -f "$postfixadminDir/$_" } readdir($d);
	if ($#files > 1){
		fail("PostfixAdmin directory '$postfixadminDir' already has files in it. Not touching them\n");
	}
}else{
	run("tar -C /var/www -xf /var/www/postfixadmin.tar.gz");
	run("ln -s /var/www/postfixadmin-* $postfixadminDir");
	succeed();
}


start("Configuring postfixadmin");
open (my $f, "<", $postfixadminDir."/config.inc.php") or die "Error opening postifixadmin's config.inc.php";
my @config = <$f>;
close $f;
my @newconfig;
foreach(@config){
	my $line = $_;
	if ($line =~ /^\$CONF\[\'configured/){
		$line = "\$CONF['configured'] = true;\n";

	}elsif ($line =~ /^\$CONF\[\'database_user/){
		$line = "\$CONF[\'database_user\'] = \'$dbuser\';\n";

	}elsif ($line =~ /^\$CONF\[\'database_password/){
		$line = "\$CONF[\'database_password\'] = \'$dbpass\';\n";

	}elsif ($line =~ /^\$CONF\[\'database_name/){
		$line = "\$CONF[\'database_name\'] = \'$dbname\';\n";

	}elsif($line =~ /^\$CONF\[\'setup_password/){
		$line =  "\$CONF[\'setup_password\'] = \'$postfixadminPasswordHash\';\n";

	}elsif($line =~ /^\$CONF\[\'vacation\'/){
		$line = "\$CONF[\'vacation\'] = \'YES\';\n";

	}elsif($line =~ /^\$CONF\[\'domain_path\'/){
		$line = "\$CONF[\'domain_path\'] = \'YES\';\n";

	}elsif($line =~ /^\$CONF\[\'domain_in_mailbox\'/){
		$line = "\$CONF[\'domain_in_mailbox\'] = \'NO\';\n";

	}elsif($line =~ /^\$CONF\[\'aliases\'/){
		$line = "\$CONF[\'aliases\'] = \'0\';\n";

	}elsif($line =~ /^\$CONF\[\'mailboxes\'/){
		$line = "\$CONF[\'mailboxes\'] = \'0\';\n";

	}elsif($line =~ /^\$CONF\[\'maxquota\'/){
		$line = "\$CONF[\'maxquota\'] = \'0\';\n";

	}elsif($line =~ /^\$CONF\[\'postfix_admin_url\'/){
		$line = "\$CONF[\'postfix_admin_url\'] = \'http://$fqdn/postfixadmin\';\n";

	}elsif($line =~ /^\$CONF\[\'user_footer_link\'/){
		$line = "\$CONF[\'user_footer_link\'] = \'http://$fqdn/postfixadmin/users/main.php';\n";

	}elsif($line =~ /^\$CONF\[\'user_footer_link\'/){
		$line = "\$CONF[\'user_footer_link\'] = \'http://$fqdn/postfixadmin/users/main.php';\n";

	}elsif($line =~ /^\$CONF\[\'user_footer_link\'/){
		$line = "\$CONF[\'user_footer_link\'] = \'http://$fqdn/postfixadmin/users/main.php';\n";

	}elsif($line =~ /^\$CONF\[\'user_footer_link\'/){
		$line = "\$CONF[\'user_footer_link\'] = \'http://$fqdn/postfixadmin/users/main.php';\n";
	}elsif($line =~ /=> \'password_no_digits 2\'/){
		$line = "#    '/([0-9].*){2}/'        => 'password_no_digits 2',      # must contain at least 2 digits\n";
	}

	$line =~ s/change-this-to-your.domain.tld/$fqdn/g;

	push(@newconfig, $line);
}


open (my $f, ">", $postfixadminDir."/config.inc.php") or die "Error opening postfixadmin's config.inc.php for writing";
print $f join("", @newconfig);
close($f);
succeed();


start("Copying vacation script into place");
$cmd = "cp ${postfixadminDir}/VIRTUAL_VACATION/vacation.pl $vacationSpool";
if (run($cmd) != 0){
	fail("Error copying ${postfixadminDir}/VIRTUAL_VACATION/vacation.pl to $vacationSpool : $!");
}else{
	succeed();
}


start("Setting permissions on vacation script");
$cmd = "chown -R vacation:vacation $vacationSpool && chmod -R 700 $vacationSpool";
if (run($cmd) != 0){
	fail("Error setting permissions on vacation spool at $vacationSpool : $!");
}else{
	succeed();
}

start("Configuring vacation script");
my $script = $vacationSpool."/vacation.pl";
open(my $f, "<", $script);
my @config = <$f>;
close($f);
my @newconfig;
foreach my $line (@config){
	if ($line =~ /our \$db_type =/){
		$line = "our \$db_type = 'mysql';";
	}elsif($line =~ /our \$db_username/){
		$line = "our \$db_username = \'$dbuser\';\n";

	}elsif($line =~ /our \$db_password/){
		$line = "our \$db_password = \'$dbpass\';\n";

	}elsif($line =~ /our \$db_name/){
		$line = "our \$db_name = \'$dbname\';\n";

	}elsif($line =~ /our \$vacation_domain/){
		$line = "our \$vacation_domain=\'$vacationDomain\';\n";
	}
	push(@newconfig,$line);
}
open(my $f, ">", $script) or die "Error opening vacation script \"$script\" for writing : $!\n";
print $f join("", @newconfig);
close($f);
succeed();

start("Configuring munin graphs");
my $cwd = cwd();
chdir($muninActivePluginDir);
foreach(glob($muninPluginGlob)){
	system("ln -s $_");
}
succeed();

my $templatesDir = $postfixadminDir."/templates_c";
start("Setting permissions on smarty templates dir $templatesDir");
$cmd = "chown apache $templatesDir && chmod 750 $templatesDir";
if(run($cmd) != 0){
	fail("Error setting permissions (needs to be writeable-to by the webserver");
}else{
	succeed();
}

# Roundcube config start
# ---------------------------------------------------------------------------------------------
my $dbuser = "roundcube";
my $dbhost = "localhost";
my $dbname = "roundcubemail";
my $dbpass = createPassword(25);
chomp $dbpass;

my $file1 = "/etc/roundcubemail/config.inc.php.sample";
my $file2 = "/etc/roundcubemail/config.inc.php";

start("Creating Roundcube db");

if (system("echo \"use $dbname\" | $mysqlconnect 2>/dev/null") == 0){
	print "skip; db already exists\n";
}else{
	if(system("echo \"create database $dbname\" | $mysqlconnect") == 0){
		succeed();
	}else{
		fail("'create database $dbname' returned non-zero");
	}
}

start("Configuring Roundcube db");
if (system("echo \"grant all privileges on $dbname.* to $dbuser\@localhost identified by \'$dbpass\'\" | $mysqlconnect") == 0){
	succeed();
}else{
	fail("'grant all privileges on $dbname.* to $dbuser\@localhost identified by \'$dbpass\'\\' returned non-zero\n");
}


start("Configuring Roundcube");
open (FILE1,"$file1");
open (FILE2,">$file2");
read( FILE1, my $file, -s FILE1 );
close (FILE1);
my %changes = (
    '[\'smtp_server\'] = \'\'' => '[\'smtp_server\'] = \'localhost\'',
    '\'zipdownload\',' => "'zipdownload',\n\t'managesieve',",
    'pass@localhost' => "$dbpass\@localhost",
);

foreach my $key (keys %changes) {
    # Do some processing on $key and $table{$key}
    print "Key is $key and value is $changes{$key}\n";
    $file =~ s/\Q$key/$changes{$key}/g;
}

$file .= "\n\n\$config['force_https'] = true;\n";
$file .= "\n\$config['quota_zero_as_unlimited'] = true;\n";
$file .= "\n\$config['enable_installer'] = true;\n";

print FILE2 $file;
close (FILE2);

succeed();

# Roundcube config end
# ---------------------------------------------------------------------------------------------

print "\n\n";
print "\tRESTARTING SERVICES\n";
print "\tI'm about to restart some services.\n\tI cannot check they've come back up successfully.\n\tYou need to do this yourself";
print "\n\n\n";

print "Restarting postfix...";
system("/etc/init.d/postfix restart 2>/dev/null >/dev/null");
if ($? != 0){
	printRed(" ERROR\n");
}else{
	printGreen(" done\n");
}

print "Restarting dovecot...";
system("/etc/init.d/dovecot restart 2>/dev/null >/dev/null");
if ($? != 0){
	printRed(" ERROR\n");
}else{
	printGreen(" done\n");
}

print "Starting saslauthd...";
system("/etc/init.d/saslauthd start 2>/dev/null >/dev/null");
if ($? != 0){
	printRed(" ERROR\n");
}else{
	printGreen(" done\n");
}

start("Setting a time zone in php.ini (Remember to change it to your local one)\n");
system("cp -fv /etc/php.ini /etc/php.ini.bak");
system("sed -i 's/;date.timezone =/date.timezone = Europe\\/London/g' /etc/php.ini");
succeed();

print "Restarting Apache2...";
system("apachectl restart 2>/dev/null > /dev/null");

if ($? != 0){
	printRed(" ERROR\n");
}else{
	printGreen(" done\n");
}

print "Restarting Munin...";
system("/etc/init.d/munin-node restart 2>/dev/null > /dev/null");
if($? != 0){
	printRed(" ERROR\n");
}else{
	printGreen(" done\n");
}
foreach my $service ("dovecot", "httpd", "munin-node", "mysqld", "postfix", "saslauthd", "", ""){
	run("chkconfig $service on && echo \"Turning on the $service service\"");
	printGreen("Turning on the $service service\n");
	}
print "Disabling SELinux, so remember to reboot after setting up the admin user!!\n";
system("cp -fv /etc/selinux/config /etc/selinux/config.bak");
system("sed -i s/SELINUX=enforcing/SELINUX=disabled/g /etc/selinux/config");

print "Opening the firewall ports for the services\n";
foreach my $port ("25", "143", "110", "993", "995", "443", "80", "587"){
	run("iptables -I INPUT -p tcp -m tcp --dport $port -j ACCEPT");
	printGreen("Opening port $port\n");
	}
run ("service iptables save");
print "\n\n";

printEndInstructions();
exit 0;



### Utility Subs ###

# Basically a clone of the related functions from pfa:
sub postfixadminCreatePassword {
        my $salt =  time(). '*' . rand(6000);
        my $password = createPassword(14);
        my $encryptedPassword = $salt.':'.sha1_hex($salt.':'.$password);
        return $password, $encryptedPassword;
}

# Generates a simple password:
sub createPassword {
        my $length = shift;
        my @chars = ("A".."Z", "a".."z", 1..9);
        my $password;
        for (my $i = 0; $i < $length; $i++){
                $password.= $chars[rand($#chars - 1)];
        }
        return $password;
}

sub backup(){
	my $from = shift;
	my $to = shift;
	my $return = 2;
	copy($from, $to);
	if ($!){
		if ($ignoreBackupFailures != 1){
			print "FAIL\n";
			print "\tWould you like to write to it anyway? y/(n)\n\t";
			chop(my $answer=<STDIN>);
			if($answer=~/^y$/i){
				$return = "1";
			}else{
				$return = "0";
			}
		}else{
			print "FAIL but ignoring";
			$return = "1";
		}
	}else{
		$return = 1;
	}
	return $return;
}

sub start{
	$task = shift;
	print $task."... ";
	_log($task);
}
sub fail{
	my $explanation = shift;
	printRed("FAILED");
	print ": $explanation" if $explanation =~ /.+/;
	print "\n";
	push(@errors, $task);
}
sub succeed{
	printGreen("Done\n");
}

sub runTest{
	my $cmd = shift;
	my $desc = shift;
	start($desc);
	my $return = run($cmd);
	if($return == 0){
		succeed();
		return $return;
	}else{
		fail();
	}
}

sub run{
	my $cmd = shift;
	_log("Command: $cmd");
	$cmd.=" 2>&1 >> $f_log";
	my $return =  system($cmd);
	succeed() if $return = 0;
	fail() if $return != 0;
	return $return;
}

sub _print{
	my $message = shift;
	chomp $message;
	print $message;
	_log($message);
}

sub _log{
#	return if $writeLog == 0;
	my $message = shift;
	chomp $message;
	open(my $fh, ">>", $f_log) or warn("Eror opening logfile $f_log: $!");
	print $fh $message ."\n";
	close($fh);
}

sub _error{
	my $message = shift;
	my $exit = shift || 1;
	chomp $message;
	print STDERR $message."\n";
	exit $exit;
}

sub printRed{
	if(0 == $colour){
		print @_;
		return
	}
	print color 'red';
	print @_;
	print color 'reset';
}

sub printYellow{
	if(0 == $colour){
		print @_;
		return
	}
	print color 'yellow';
	print @_;
	print color 'reset';
}

sub printGreen{
	if(0 == $colour){
		print @_;
		return
	}
	print color 'green';
	print @_;
	print color 'reset';
}

sub printBlue{
	if(0 == $colour){
		print @_;
		return
	}
	print color 'blue';
	print @_;
	print color 'reset';
}
